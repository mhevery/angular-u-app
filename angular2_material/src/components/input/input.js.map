{"version":3,"sources":["input.js"],"names":[],"mappings":"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","file":"angular2_material/src/components/input/input.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\r\n    switch (arguments.length) {\r\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\r\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\r\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\r\n    }\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { Directive, onAllChangesDone, Attribute, Parent } from 'angular2/angular2';\r\nimport { ObservableWrapper, EventEmitter } from 'angular2/src/facade/async';\r\n// TODO(jelbourn): validation (will depend on Forms API).\r\n// TODO(jelbourn): textarea resizing\r\n// TODO(jelbourn): max-length counter\r\n// TODO(jelbourn): placeholder property\r\nexport let MdInputContainer = class {\r\n    constructor(id) {\r\n        this._input = null;\r\n        this.inputHasValue = false;\r\n        this.inputHasFocus = false;\r\n    }\r\n    onAllChangesDone() {\r\n        // Enforce that this directive actually contains a text input.\r\n        if (this._input == null) {\r\n            throw 'No <input> or <textarea> found inside of <md-input-container>';\r\n        }\r\n    }\r\n    /** Registers the child MdInput or MdTextarea. */\r\n    registerInput(input) {\r\n        if (this._input != null) {\r\n            throw 'Only one text input is allowed per <md-input-container>.';\r\n        }\r\n        this._input = input;\r\n        this.inputHasValue = input.value != '';\r\n        // Listen to input changes and focus events so that we can apply the appropriate CSS\r\n        // classes based on the input state.\r\n        ObservableWrapper.subscribe(input.mdChange, value => { this.inputHasValue = value != ''; });\r\n        ObservableWrapper.subscribe(input.mdFocusChange, hasFocus => { this.inputHasFocus = hasFocus; });\r\n    }\r\n};\r\nMdInputContainer = __decorate([\r\n    Directive({\r\n        selector: 'md-input-container',\r\n        lifecycle: [onAllChangesDone],\r\n        host: { '[class.md-input-has-value]': 'inputHasValue', '[class.md-input-focused]': 'inputHasFocus' }\r\n    }),\r\n    __param(0, Attribute('id')), \r\n    __metadata('design:paramtypes', [String])\r\n], MdInputContainer);\r\nexport let MdInput = class {\r\n    constructor(value, container, id) {\r\n        // TODO(jelbourn): Remove this when #1402 is done.\r\n        this.yes = true;\r\n        this.value = value == null ? '' : value;\r\n        this.mdChange = new EventEmitter();\r\n        this.mdFocusChange = new EventEmitter();\r\n        container.registerInput(this);\r\n    }\r\n    updateValue(event) {\r\n        this.value = event.target.value;\r\n        ObservableWrapper.callNext(this.mdChange, this.value);\r\n    }\r\n    setHasFocus(hasFocus) {\r\n        ObservableWrapper.callNext(this.mdFocusChange, hasFocus);\r\n    }\r\n};\r\nMdInput = __decorate([\r\n    Directive({\r\n        selector: 'md-input-container input',\r\n        events: ['mdChange', 'mdFocusChange'],\r\n        host: {\r\n            '[class.md-input]': 'yes',\r\n            '(input)': 'updateValue($event)',\r\n            '(focus)': 'setHasFocus(true)',\r\n            '(blur)': 'setHasFocus(false)'\r\n        }\r\n    }),\r\n    __param(0, Attribute('value')),\r\n    __param(1, Parent()),\r\n    __param(2, Attribute('id')), \r\n    __metadata('design:paramtypes', [String, MdInputContainer, String])\r\n], MdInput);\r\n/*\r\n@Directive({\r\n  selector: 'md-input-container textarea',\r\n  events: ['mdChange', 'mdFocusChange'],\r\n  hostProperties: {\r\n    'yes': 'class.md-input'\r\n  },\r\n  hostListeners: {\r\n    'input': 'updateValue($event)',\r\n    'focus': 'setHasFocus(true)',\r\n    'blur': 'setHasFocus(false)'\r\n  }\r\n})\r\nexport class MdTextarea extends MdInput {\r\n  constructor(\r\n      @Attribute('value') value: string,\r\n      @Parent() container: MdInputContainer,\r\n      @Attribute('id') id: string) {\r\n    super(value, container, id);\r\n  }\r\n}\r\n*/\r\n//# sourceMappingURL=input.js.map"]}