{"version":3,"sources":["grid_list.js"],"names":[],"mappings":"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","file":"angular2_material/src/components/grid_list/grid_list.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") return Reflect.decorate(decorators, target, key, desc);\r\n    switch (arguments.length) {\r\n        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);\r\n        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);\r\n        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);\r\n    }\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nimport { Component, View, Parent, onDestroy, onChange, onAllChangesDone } from 'angular2/angular2';\r\nimport { ListWrapper } from 'angular2/src/facade/collection';\r\nimport { StringWrapper, isString, NumberWrapper, RegExpWrapper } from 'angular2/src/facade/lang';\r\nimport { Math } from 'angular2/src/facade/math';\r\n// TODO(jelbourn): Set appropriate aria attributes for grid list elements.\r\n// TODO(jelbourn): Animations.\r\n// TODO(jelbourn): Conditional (responsive) column count / row size.\r\n// TODO(jelbourn): Re-layout on window resize / media change (debounced).\r\n// TODO(jelbourn): gridTileHeader and gridTileFooter.\r\n// TODO(jelbourn): rowHeightMode enum (after TS conversion).\r\nexport let MdGridList = class {\r\n    constructor() {\r\n        this.tiles = [];\r\n        this.rows = 0;\r\n    }\r\n    set cols(value) {\r\n        this._cols = isString(value) ? NumberWrapper.parseInt(value, 10) : value;\r\n    }\r\n    get cols() {\r\n        return this._cols;\r\n    }\r\n    /** Set internal representation of row height from the user-provided value. */\r\n    set rowHeight(value) {\r\n        if (value === 'fit') {\r\n            this.rowHeightMode = 'fit';\r\n        }\r\n        else if (StringWrapper.contains(value, ':')) {\r\n            var ratioParts = StringWrapper.split(value, RegExpWrapper.create(':'));\r\n            if (ratioParts.length !== 2) {\r\n                throw `md-grid-list: invalid ratio given for row-height: \"${value}\"`;\r\n            }\r\n            this.rowHeightMode = 'ratio';\r\n            this.rowHeightRatio =\r\n                NumberWrapper.parseFloat(ratioParts[0]) / NumberWrapper.parseFloat(ratioParts[1]);\r\n        }\r\n        else {\r\n            this.rowHeightMode = 'fixed';\r\n            this.fixedRowHeight = value;\r\n        }\r\n    }\r\n    onAllChangesDone() {\r\n        this.layoutTiles();\r\n    }\r\n    /** Computes and applies the size and position for all children grid tiles. */\r\n    layoutTiles() {\r\n        var tracker = new TileCoordinator(this.cols, this.tiles);\r\n        this.rows = tracker.rowCount;\r\n        for (var i = 0; i < this.tiles.length; i++) {\r\n            var pos = tracker.positions[i];\r\n            var tile = this.tiles[i];\r\n            var style = this.getTileStyle(tile, pos.row, pos.col);\r\n            tile.styleWidth = style.width;\r\n            tile.styleHeight = style.height;\r\n            tile.styleTop = style.top;\r\n            tile.styleLeft = style.left;\r\n            tile.styleMarginTop = style.marginTop;\r\n            tile.stylePaddingTop = style.paddingTop;\r\n        }\r\n    }\r\n    /**\r\n     * Adds a tile to the grid-list.\r\n     * @param tile\r\n     */\r\n    addTile(tile) {\r\n        ListWrapper.push(this.tiles, tile);\r\n    }\r\n    /**\r\n     * Removes a tile from the grid-list.\r\n     * @param tile\r\n     */\r\n    removeTile(tile) {\r\n        ListWrapper.remove(this.tiles, tile);\r\n    }\r\n    /**\r\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n     * Used as a basis for other calculations.\r\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n     */\r\n    getBaseTileSize(sizePercent, gutterFraction) {\r\n        // Take the base size percent (as would be if evenly dividing the size between cells),\r\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\r\n        // edges, each tile only uses a fration (gutterShare = numGutters / numCells) of the gutter\r\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\r\n        // edge evenly among the cells).\r\n        return `(${sizePercent}% - ( ${this.gutterSize} * ${gutterFraction} ))`;\r\n    }\r\n    /**\r\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n     * @param offset Number of tiles that have already been rendered in the row/column.\r\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @return Position of the tile as a CSS calc() expression.\r\n     */\r\n    getTilePosition(baseSize, offset) {\r\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\r\n        // row/column (offset).\r\n        return `calc( (${baseSize} + ${this.gutterSize}) * ${offset} )`;\r\n    }\r\n    /**\r\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @param span The tile's rowspan or colspan.\r\n     * @return Size of the tile as a CSS calc() expression.\r\n     */\r\n    getTileSize(baseSize, span) {\r\n        return `calc( (${baseSize} * ${span}) + (${span - 1} * ${this.gutterSize}) )`;\r\n    }\r\n    /** Gets the style properties to be applied to a tile for the given row and column index. */\r\n    getTileStyle(tile, rowIndex, colIndex) {\r\n        // Percent of the available horizontal space that one column takes up.\r\n        var percentWidthPerTile = 100 / this.cols;\r\n        // Fraction of the vertical gutter size that each column takes up.\r\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\r\n        var gutterWidthFractionPerTile = (this.cols - 1) / this.cols;\r\n        // Base horizontal size of a column.\r\n        var baseTileWidth = this.getBaseTileSize(percentWidthPerTile, gutterWidthFractionPerTile);\r\n        // The width and horizontal position of each tile is always calculated the same way, but the\r\n        // height and vertical position depends on the rowMode.\r\n        var tileStyle = new TileStyle();\r\n        tileStyle.left = this.getTilePosition(baseTileWidth, colIndex);\r\n        tileStyle.width = this.getTileSize(baseTileWidth, tile.colspan);\r\n        // TODO: make cases enums when we support enums\r\n        switch (this.rowHeightMode) {\r\n            case 'fixed':\r\n                // In fixed mode, simply use the given row height.\r\n                tileStyle.top = this.getTilePosition(this.fixedRowHeight, rowIndex);\r\n                tileStyle.height = this.getTileSize(this.fixedRowHeight, tile.rowspan);\r\n                break;\r\n            case 'ratio':\r\n                var percentHeightPerTile = percentWidthPerTile / this.rowHeightRatio;\r\n                var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidthFractionPerTile);\r\n                // Use paddingTop and marginTop to maintain the given aspect ratio, as\r\n                // a percentage-based value for these properties is applied versus the *width* of the\r\n                // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\r\n                tileStyle.marginTop = this.getTilePosition(baseTileHeight, rowIndex);\r\n                tileStyle.paddingTop = this.getTileSize(baseTileHeight, tile.rowspan);\r\n                break;\r\n            case 'fit':\r\n                // Percent of the available vertical space that one row takes up.\r\n                var percentHeightPerTile = 100 / this.cols;\r\n                // Fraction of the horizontal gutter size that each column takes up.\r\n                var gutterHeightFractionPerTile = (this.rows - 1) / this.rows;\r\n                // Base vertical size of a column.\r\n                var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightFractionPerTile);\r\n                tileStyle.top = this.getTilePosition(baseTileHeight, rowIndex);\r\n                tileStyle.height = this.getTileSize(baseTileHeight, tile.rowspan);\r\n                break;\r\n        }\r\n        return tileStyle;\r\n    }\r\n};\r\nMdGridList = __decorate([\r\n    Component({\r\n        selector: 'md-grid-list',\r\n        properties: ['cols', 'rowHeight', 'gutterSize'],\r\n        lifecycle: [onAllChangesDone]\r\n    }),\r\n    View({ templateUrl: 'angular2_material/src/components/grid_list/grid_list.html' }), \r\n    __metadata('design:paramtypes', [])\r\n], MdGridList);\r\nexport let MdGridTile = class {\r\n    constructor(gridList) {\r\n        this.gridList = gridList;\r\n        // Tiles default to 1x1, but rowspan and colspan can be changed via binding.\r\n        this.rowspan = 1;\r\n        this.colspan = 1;\r\n    }\r\n    set rowspan(value) {\r\n        this._rowspan = isString(value) ? NumberWrapper.parseInt(value, 10) : value;\r\n    }\r\n    get rowspan() {\r\n        return this._rowspan;\r\n    }\r\n    set colspan(value) {\r\n        this._colspan = isString(value) ? NumberWrapper.parseInt(value, 10) : value;\r\n    }\r\n    get colspan() {\r\n        return this._colspan;\r\n    }\r\n    /**\r\n     * Change handler invoked when bindings are resolved or when bindings have changed.\r\n     * Notifies grid-list that a re-layout is required.\r\n     */\r\n    onChange(_) {\r\n        if (!this.isRegisteredWithGridList) {\r\n            this.gridList.addTile(this);\r\n            this.isRegisteredWithGridList = true;\r\n        }\r\n    }\r\n    /**\r\n     * Destructor function. Deregisters this tile from the containing grid-list.\r\n     */\r\n    onDestroy() {\r\n        this.gridList.removeTile(this);\r\n    }\r\n};\r\nMdGridTile = __decorate([\r\n    Component({\r\n        selector: 'md-grid-tile',\r\n        properties: ['rowspan', 'colspan'],\r\n        host: {\r\n            '[style.height]': 'styleHeight',\r\n            '[style.width]': 'styleWidth',\r\n            '[style.top]': 'styleTop',\r\n            '[style.left]': 'styleLeft',\r\n            '[style.marginTop]': 'styleMarginTop',\r\n            '[style.paddingTop]': 'stylePaddingTop',\r\n            '[role]': '\"listitem\"'\r\n        },\r\n        lifecycle: [onDestroy, onChange]\r\n    }),\r\n    View({ templateUrl: 'angular2_material/src/components/grid_list/grid_tile.html' }),\r\n    __param(0, Parent()), \r\n    __metadata('design:paramtypes', [MdGridList])\r\n], MdGridTile);\r\n/**\r\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\r\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\r\n * because the tiles can have a rowspan.\r\n *\r\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\r\n * large enough to accomodate it so that the tiles still render in the same order in which they\r\n * are given.\r\n *\r\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\r\n * element of the array corresponds to a column, and the value indicates how many cells in that\r\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\r\n * decrements each value in the tracking array (indicating that the column is one cell closer to\r\n * being free).\r\n */\r\nclass TileCoordinator {\r\n    constructor(numColumns, tiles) {\r\n        this.columnIndex = 0;\r\n        this.rowIndex = 0;\r\n        this.tracker = ListWrapper.createFixedSize(numColumns);\r\n        ListWrapper.fill(this.tracker, 0);\r\n        this.positions = ListWrapper.map(tiles, tile => this._trackTile(tile));\r\n    }\r\n    /** Gets the number of rows occupied by tiles. */\r\n    get rowCount() {\r\n        return this.rowIndex + 1;\r\n    }\r\n    _trackTile(tile) {\r\n        if (tile.colspan > this.tracker.length) {\r\n            throw `Tile with colspan ${tile.colspan} is wider\n          than grid with cols=\"${this.tracker.length}\".`;\r\n        }\r\n        // Start index is inclusive, end index is exclusive.\r\n        var gapStartIndex = -1;\r\n        var gapEndIndex = -1;\r\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\r\n        do {\r\n            // If we've reached the end of the row, go to the next row\r\n            if (this.columnIndex + tile.colspan > this.tracker.length) {\r\n                this._nextRow();\r\n                continue;\r\n            }\r\n            gapStartIndex = ListWrapper.indexOf(this.tracker, 0, this.columnIndex);\r\n            // If there are no more empty spaces in this row at all, move on to the next row.\r\n            if (gapStartIndex == -1) {\r\n                this._nextRow();\r\n                continue;\r\n            }\r\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n            // If a gap large enough isn't found, we want to start looking immediately after the current\r\n            // gap on the next iteration.\r\n            this.columnIndex = gapStartIndex + 1;\r\n        } while (gapEndIndex - gapStartIndex < tile.colspan);\r\n        // We now have a space big enough for this tile, so place it.\r\n        this._markTilePosition(gapStartIndex, tile);\r\n        // The next time we look for a gap, the search will start at columnIndex, which should be\r\n        // immediately after the tile that has just been placed.\r\n        this.columnIndex = gapStartIndex + tile.colspan;\r\n        return new Position(this.rowIndex, gapStartIndex);\r\n    }\r\n    /** Move \"down\" to the next row. */\r\n    _nextRow() {\r\n        this.columnIndex = 0;\r\n        this.rowIndex++;\r\n        // Decrement all spaces by one to reflect moving down one row.\r\n        for (var i = 0; i < this.tracker.length; i++) {\r\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\r\n        }\r\n    }\r\n    /**\r\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n     * The gap ends when a non-zero value is found.\r\n     */\r\n    _findGapEndIndex(gapStartIndex) {\r\n        for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\r\n            if (this.tracker[i] != 0) {\r\n                return i;\r\n            }\r\n        }\r\n        // The gap ends with the end of the row.\r\n        return this.tracker.length;\r\n    }\r\n    /** Update the tile tracker to account for the given tile in the given space. */\r\n    _markTilePosition(start, tile) {\r\n        for (var i = 0; i < tile.colspan; i++) {\r\n            this.tracker[start + i] = tile.rowspan;\r\n        }\r\n    }\r\n}\r\n/** Simple data structure for tile position (row, col). */\r\nclass Position {\r\n    constructor(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n}\r\n/** Simple data structure for style values to be applied to a tile. */\r\nclass TileStyle {\r\n}\r\n//# sourceMappingURL=grid_list.js.map"]}